local NothingLibrary = loadstring(game:HttpGetAsync('https://raw.githubusercontent.com/3345-c-a-t-s-u-s/NOTHING/main/source.lua'))();

local Notification = NothingLibrary.Notification();

Notification.new({
	Title = "Welcome!",
	Description = "This is the VicoXNury script that we will develop",
	Duration = 5,
	Icon = "rbxassetid://8997385628"
})

wait(2)

-- Warning as notification
Notification.new({
	Title = "Beta Version Warning",
	Description = "Not available for all. This is a beta version...",
	Duration = 5,
	Icon = "rbxassetid://8997385628",  -- Optional icon
	Color = Color3.fromRGB(255, 0, 0)  -- Red color for warning
})

local self
local visualizervar, autoparryvar
local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local TweenService = game:GetService('TweenService')
local parry_helper = loadstring(game:HttpGet("https://raw.githubusercontent.com/imtiyaslentra/VICO-HELPER/refs/heads/main/HELPER%20VICO"))()
local function getTrainingBall()
	for index, ball in workspace:WaitForChild("TrainingBalls"):GetChildren() do
		if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
			return ball
		end
	end
end
local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local rawr

getgenv().ai_Enabled = false
getgenv().visualize_Enabled = false


 platform = game:GetService("UserInputService").TouchEnabled and "Android" or "PC"
print("Platform detected:", platform)

local parry_remote -- Variabel global untuk RemoteEvent
local function resolve_parry_Remote()
    while true do
        local found = false
        -- Gunakan `game:GetDescendants()` untuk mencari di seluruh game
        for _, object in pairs(game:GetDescendants()) do
            if object:IsA("RemoteEvent") and object.Name:find("\n") then
                parry_remote = object
                found = true
                print("RemoteEvent found on platform:", platform, " | Remote Name:", object.Name)
                break
            end
        end

        if found then
            break
        end
        wait(0.1) -- Interval pencarian
    end

    if not parry_remote then
        warn("RemoteEvent could not be found. Please check if the RemoteEvent exists!")
    end
end



-- Panggil fungsi untuk menemukan RemoteEvent
resolve_parry_Remote()


local data = {
	canParry = true,
	modeParry = nil,
	is_Spamming = false,
	parry_Range = 30,
	spam_Range = 10,  
	hit_Count = 0,
	target_Count = 0,
	hit_Time = tick(),
	ball_Warping = tick(),
	is_ball_Warping = false,
	last_target = nil,
	is_target = false,
	taken_time = 1,
	aero_taken_times = 0,
	not_target_time = tick(),
	distance_player_to_ball = 0,
	aero_find = false,
	can_spam = true,
	last_angle_degrees = 0,
	last_ball_position = Vector3.new(0,0,0),
	is_curving = false,
	telesink_start_time = nil,
	is_telesinking = false,
	pull_start_time = nil,
	is_pulled = false,
	last_ball_speed = 0,
	spam_delay = 0,
	last_check_time = 0,
}

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()

    data.hit_Count += 1

    task.delay(0.15, function()

        data.hit_Count -= 1

    end)

end)

workspace:WaitForChild("Balls").ChildRemoved:Connect(function(child)
	data.target_Count = 0
	data.taken_time = 1
	data.hit_Count = 0
	data.is_ball_Warping = false
	data.is_Spamming = false
	data.can_parry = true
	data.last_target = nil
end)

local Windows = NothingLibrary.new({
	Title = "Vico X Nurysium",
	Description = "will this be a bummer ðŸ˜±",
	Keybind = Enum.KeyCode.LeftControl,
	Logo = 'http://www.roblox.com/asset/?id=18898582662'
})

-- Main Tab
local TabFrame = Windows:NewTab({
	Title = "Main",
	Description = "Main Controls",
	Icon = "rbxassetid://13014537525"
})

local Section = TabFrame:NewSection({
	Title = "Main Section",
	Icon = "rbxassetid://7743869054",
	Position = "Left"
})

Section:NewToggle({
	Title = "Auto Parry (Still Fixing)",
	Default = false,
	Callback = function(toggled)
		getgenv().aura_Enabled = toggled
	end    
})

Section:NewToggle({
	Title = "Auto Curve (Random Curve/ Camera)",
	Default = false,
	Callback = function(toggled)
		getgenv().auto_curve_Enabled
= toggled
	end    
})

-- Visual Tab
local TabFrame = Windows:NewTab({
	Title = "Visual",
	Description = "Visual Settings",
	Icon = "rbxassetid://7733774602"
})

local Section = TabFrame:NewSection({
	Title = "Visual Section",
	Icon = "rbxassetid://7743869054",
	Position = "Left"
})

Section:NewToggle({
	Title = "Visualizer",
	Default = false,
	Callback = function(toggled)
		getgenv().visualize_Enabled = toggled
	end
})


local function get_closest_entity(Object: Part)

    task.spawn(function()

        local closest

        local max_distance = math.huge

        for index, entity in workspace.Alive:GetChildren() do

            if entity.Name ~= Players.LocalPlayer.Name then

                local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude

                if distance < max_distance then

                    closest_Entity = entity

                    max_distance = distance

                end

            end

        end

        return closest_Entity

    end)

end

local Takentime = tick() - data.hit_Time
RunService.Heartbeat:Connect(function()
	Takentime = tick() - data.hit_Time
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()
	data.hit_Count += 1

	task.delay(0.185, function()
		data.hit_Count -= 1
	end)
end)

task.spawn(function()
    RunService.Heartbeat:Connect(function()
        if not getgenv().aura_Enabled then
            data.target_Count = 0
			data.hit_Count = 0
			data.is_Spamming = false
			data.last_target = nil
			return
		end

        if closest_Entity then
			if workspace.Alive:FindFirstChild(closest_Entity.Name) then
				if data.is_Spamming then
					if workspace.Alive:FindFirstChild(local_player.Name) and data.can_spam and (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Magnitude <= data.spam_Range  then
                        task.defer(function()
                            parry_remote:FireServer(
                                0.5,
                                CFrame.new(camera.CFrame.Position, Vector3.zero),
                                { [closest_Entity.Name] = closest_Entity.HumanoidRootPart.Position },
                                { closest_Entity.HumanoidRootPart.Position.X, closest_Entity.HumanoidRootPart.Position.Y },
                                false
                            )
                        end)
                    end
                end
            end
        end
    end)
end)

    
autoparryvar = RunService:BindToRenderStep("Auto Parry",Enum.RenderPriority.First.Value,function()
		if not getgenv().aura_Enabled then
        data.target_Count = 0
			data.hit_Time = tick()
			data.hit_Count = 0
			data.is_ball_Warping = false
			data.is_Spamming = false
			data.canParry = true
			data.last_target = nil
			return
		end

		local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
        if training_mode then
			self = getTrainingBall()
		else
		    self = parry_helper.FindTargetBall()
        end    

		if not self then
        data.target_Count = 0
			data.taken_time = 1
			data.hit_Count = 0
			data.is_ball_Warping = false
			data.is_Spamming = false
			data.canParry = true
			data.last_target = nil
			return
		end

		self:GetAttributeChangedSignal('target'):Once(function()
			data.canParry = true
		end)
        if self:GetAttribute('target') == local_player.Name and rawr then
			data.target_Count = data.target_Count + 1
			rawr = false
		elseif self:GetAttribute('target') ~= local_player.Name then
			srawr = true
		end
		task.delay(0.2 + (ping / 100),function()
			data.target_Count = data.target_Count - 1
		end)

		self:GetAttributeChangedSignal('from'):Once(function()
			data.last_target = workspace.Alive:FindFirstChild(self:GetAttribute('from'))
		end)

		if self:GetAttribute('target') ~= local_player.Name or not data.canParry then
			return
		end

        get_closest_entity(local_player.Character.PrimaryPart)

	    local ball_Position = self.Position
		local ball_Velocity = self.AssemblyLinearVelocity
		if self:FindFirstChild("zoomies") then
			ball_Velocity = self.zoomies.VectorVelocity
		end
		local ball_Direction = (local_player.Character.PrimaryPart.Position - ball_Position).Unit
		local ball_Distance = (local_player.Character.PrimaryPart.Position - ball_Position).Magnitude
		local target_ball_distance = (closest_Entity.HumanoidRootPart.Position - ball_Position).Magnitude
		data.distance_player_to_ball = ball_Distance
		local ball_DirectionNew
		local ball_DistanceNew
		local targetPosition = (self:GetAttribute('target') == local_player.Name and local_player.Character.PrimaryPart.Position or closest_Entity.HumanoidRootPart.Position)
		ball_DirectionNew = (targetPosition - ball_Position).Unit
		ball_DistanceNew = (targetPosition - ball_Position).Magnitude
		local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
		ball_Dot = math.clamp(ball_Dot, -1, 1)
		local ball_Dot_New = ball_DirectionNew:Dot(ball_Velocity.Unit)
		local ball_Speed = ball_Velocity.Magnitude
		local player_Position = local_player.Character.PrimaryPart.Position
		local player_Dir = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
		local player_Velocity = local_player.Character.HumanoidRootPart.AssemblyLinearVelocity
		local player_isMoving = player_Velocity.Magnitude > 0
		local player_dot = player_isMoving and math.max(player_Dir:Dot(player_Velocity.Unit), 0)
		local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1)
		local ball_predicted_Distance = (ball_Distance - ping / 15.5) - (ball_Speed / 3.5)
		local ball_predicted_Distance_target = (target_ball_distance - ping / 15.5) - (ball_Speed / 3.5)
		local predictionTime = 0.25 + (ping / 100)
		local ball_PredictedPosition = ball_Position + (ball_Velocity * predictionTime)
		local ball_PredictedDistance = (local_player.Character.PrimaryPart.Position - ball_PredictedPosition).Magnitude 
		local target_Position = closest_Entity.HumanoidRootPart.Position
		local target_Distance = local_player:DistanceFromCharacter(target_Position)
		local closest_target_Distance = local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position)
		local target_distance_Limited = math.min(target_Distance / 10000, 0.1)
		local target_Direction = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
		local target_Ball_Distance = (targetPosition - ball_Position).Magnitude
		local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity
		local target_isMoving = target_Velocity.Magnitude > 0
		local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0)
		local baseMoveAmount = 0.5
		local moveAmount = baseMoveAmount * (1 / (closest_target_Distance + 0.01)) * 1000
		local maxDistance = 1000
		local moveAmountNew = math.max(0, math.min(0.6 * closest_target_Distance, 1))
		data.spam_delay = moveAmountNew
		data.spam_Range = math.min(moveAmount + (ball_Speed / 7.15), (150 + moveAmount)) + math.max(ping / 2, 3.5)
		local L = ball_Speed / 2000
		local time_since_last_angle_check = tick() - (data.last_check_time or 0)
		local min_time_between_checks = 0.1
		local angle_degrees = math.deg(math.acos(ball_Dot_New))
		local ball_is_target
		ball_is_target = self:GetAttribute('target') == local_player.Name
		local previous_angle_degrees = data.last_angle_degrees or angle_degrees
		local delta_angle = math.abs(previous_angle_degrees - angle_degrees)
		if target_Distance <= data.spam_Range then
			takentimestart = true
		elseif target_Distance >= data.spam_Range + 7.5 then
			takentimestart = false
			data.taken_time = 1
		end
		data.can_spam = true
		local curve = (1 - ball_Dot_New) / 2
		local num = 6.25 - (ping / 10)
		if ball_Speed >= 250 then
		num = 12.5 - (ping / 10)
		elseif ball_Speed >= 500 then
		num = 25 - (ping / 10)
		elseif ball_Speed >= 750 then
		num = 50 - (ping / 10)
		end
		if delta_angle > 31 + (ball_Speed / num) then
			data.can_spam = false
		else
			data.can_spam = true
		end
		data.last_angle_degrees = angle_degrees
		data.last_check_time = tick()
		data.parry_Range = math.max(math.max(ping / 2, 3.5) + ball_Speed / math.pi)
		if target_isMoving then
			data.is_Spamming = data.taken_time < (target_Distance < 11 and ball_Distance < 10) and ball_Dot > -0.25
		else
			data.is_Spamming = data.taken_time < (0.7 + (ping / 1000))  or (target_Distance < 13.5 and ball_Distance < 20) and ball_Velocity.Y > -50
		end
		if ball_Dot < -0.2 then
			data.ball_Warping = tick()
		end
		task.spawn(function()
			if (tick() - data.ball_Warping) >= 0.15 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 10 then
				data.is_ball_Warping = false
				return
			end
			if data.last_target then
				if (ball_Position - data.last_target.HumanoidRootPart.Position).Magnitude > 35.5 or target_Distance <= 12 then
					data.is_ball_Warping = false
				end
			end
			data.is_ball_Warping = true
		end)
		if ball_Velocity.Y < -200 and self:FindFirstChild("AeroDynamicSlash") then
			data.aero_find = true
			data.parry_Range /= 2
		else
			data.aero_find = false
		end
		if not ball_is_target or not data.canParry then
			return
		end
		local ping_based_ball_distance
		if Stats.Network.ServerStatsItem["Data Ping"]:GetValue() > 150 and ball_predicted_Distance or ball_Distance then
			ping_based_ball_distance = ball_predicted_Distance
		else
			ping_based_ball_distance = ball_Distance
		end
		if (ping_based_ball_distance <= data.parry_Range) and not data.is_ball_Warping and delta_angle < 31 and angle_degrees < 69 then		
			local cf = camera.CFrame

            if getgenv().auto_curve_Enabled then
                parry_remote:FireServer(
                    0.5,
                    CFrame.new(camera.CFrame.Position, Vector3.new(
                        math.random(-1000, 1000),
                        math.random(0, 1000),
                        math.random(100, 1000)
                    )),
                    {[closest_Entity.Name] = target_Position},
                    {target_Position.X, target_Position.Y},
                    false
                )
            else
                local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cf:GetComponents()
                parry_remote:FireServer(
                    0,
                    CFrame.new(x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22),
                    {[closest_Entity.Name] = target_Position},
                    {target_Position.X, target_Position.Y},
                    false
                )
            end
            
			data.hit_Count = data.hit_Count + 1
			task.delay(0.2 + (ping / 100), function()
				data.hit_Count = data.hit_Count - 1
			end)
			data.hit_Time = tick()
			data.canParry = false
		end
		task.spawn(function()
    repeat
        RunService.Heartbeat:Wait()
         until (tick() - data.hit_Time) >= 1
    data.canParry = true
end)
end)

local self = parry_helper.FindTargetBall()
	wait(0.1)
	local Visualize = Instance.new("Part",workspace)
	local Visualize1 = Instance.new("Part",workspace)
	wait(0.5)
	Visualize.Color = Color3.new(0, 0, 0)
	Visualize.Material = Enum.Material.ForceField
	Visualize.Transparency = 0.5
	Visualize.Anchored = true
	Visualize.CanCollide = false
	Visualize.CastShadow = false
	Visualize.Shape = Enum.PartType.Ball
	Visualize.Size = Vector3.new(30,30,30)
	Visualize1.Color = Color3.new(1, 0, 0)
	Visualize1.Material = Enum.Material.ForceField
	Visualize1.Transparency = 0.5
	Visualize1.Anchored = true
	Visualize1.CanCollide = false
	Visualize1.CastShadow = false
	Visualize1.Shape = Enum.PartType.Ball
	Visualize1.Size = Vector3.new(data.spam_Range, data.spam_Range, data.spam_Range)

	local Highlight1 = Instance.new("Highlight")
	Highlight1.Parent = Visualize1
	Highlight1.Enabled = true
	Highlight1.FillTransparency = 0
	Highlight1.OutlineColor = Color3.new(1, 1, 1)
	local Highlight = Instance.new("Highlight")
	Highlight.Parent = Visualize
	Highlight.Enabled = true
	Highlight.FillTransparency = 0
	Highlight.OutlineColor = Color3.new(1, 1, 1)
	
task.spawn(function()
visualizervar = RunService.RenderStepped:Connect(function()
		if getgenv().visualize_Enabled then
			Visualize.Transparency = 0
			Visualize.Material = Enum.Material.ForceField
			Visualize.Size = Vector3.new(data.parry_Range, data.parry_Range, data.parry_Range)
			Visualize.CFrame = CFrame.new(local_player.Character.PrimaryPart.Position)
			Visualize1.Transparency = 0
			Visualize1.Material = Enum.Material.ForceField
			Visualize1.Size = Vector3.new(data.spam_Range, data.spam_Range, data.spam_Range)
			Visualize1.CFrame = CFrame.new(local_player.Character.PrimaryPart.Position)
		else
			Visualize.Material = Enum.Material.ForceField
			Visualize.Transparency = 1
			Visualize1.Material = Enum.Material.ForceField
			Visualize1.Transparency = 1
		end	
	end)
end)

-- Define a safe disconnect function to avoid errors
local function safeDisconnect(connection)
    if connection and connection.Disconnect then
        connection:Disconnect()
    end
end

local function manageConnection(flag, varName, runServiceFunc)
    if flag then
        if not _G[varName] then
            _G[varName] = RunService[runServiceFunc]:Connect(function()
                -- Kode koneksi
            end)
        end
    else
        safeDisconnect(_G[varName])
        _G[varName] = nil
    end
end

RunService.Heartbeat:Connect(function()
    manageConnection(visualize_Enabled, "visualizervar", "Heartbeat")
    manageConnection(aura_Enabled, "autoparryvar", "Heartbeat")
end)
